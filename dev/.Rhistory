indeces=indeces
dt=dt[non_sym_tr,]
source(file="Documents/Projects/02_SyndromeClassification/NewProject/Functions.R")
#This will be replaced
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/features.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/response.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/dt.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/non_sym_tr.RData")
#This will be replaced
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_dist.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_angles.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_areas.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_point.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
colnames(coef.distances)=colnames(coef.areas)=colnames(coef.angles)=colnames(coef.points)=levels(response)
# Compute and save color coefficients
synd=levels(response)
N_synd=length(synd)
Npoints=100
coefficients=c(coef.points[,s], coef.distances[,s], coef.areas[,s],coef.angles[,s])
graph=Graph(features=features[response==s,],indeces=indeces,dt=dt[non_sym_tr,])
Npoints
indeces$coordinates
dim(graph)
graph[indeces$coordinates,]
graph['X',indeces$coordinates]
source('Documents/Projects/02_SyndromeClassification/0102_DataPreprocess.r')
features=as.data.frame(cbind(points.front,dist.mono.pairs,area,angles))
Npoints=ncol(points.front)
Ndist=ncol(dist.mono.pairs)
Nareas=ncol(area)
Nangl=ncol(angles)
indeces=list(coordinates = 1:Npoints,
distances = (Npoints+1):(Npoints+Ndist),
areas = (Npoints+Ndist+1):(Npoints+Ndist+Nareas),
angles =(Npoints+Ndist+Nareas+1):(Npoints+Ndist+Nareas+Nangl))
Npoints=ncol(points.front)/2
indeces2=list(coordinates = 1:Npoints,
distances = (Npoints+1):(Npoints+Ndist),
areas = (Npoints+Ndist+1):(Npoints+Ndist+Nareas),
angles =(Npoints+Ndist+Nareas+1):(Npoints+Ndist+Nareas+Nangl))
indeces2
save(indeces2, file="Documents/Projects/02_SyndromeClassification/NewProject/indeces2.RData")
library(geometry); library(grDevices) ; library(calibrate)
set.seed(30091987)
source(file="Documents/Projects/02_SyndromeClassification/NewProject/Functions.R")
#This will be replaced
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/features.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/response.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/dt.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/non_sym_tr.RData")
#This will be replaced
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_dist.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_angles.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_areas.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_point.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
colnames(coef.distances)=colnames(coef.areas)=colnames(coef.angles)=colnames(coef.points)=levels(response)
# Compute and save color coefficients
synd=levels(response)
N_synd=length(synd)
Npoints=100
rm(list=ls())
library(geometry); library(grDevices) ; library(calibrate)
set.seed(30091987)
source(file="Documents/Projects/02_SyndromeClassification/NewProject/Functions.R")
#This will be replaced
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/features.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/response.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/dt.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/non_sym_tr.RData")
#This will be replaced
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_dist.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_angles.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_areas.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_point.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
colnames(coef.distances)=colnames(coef.areas)=colnames(coef.angles)=colnames(coef.points)=levels(response)
# Compute and save color coefficients
synd=levels(response)
N_synd=length(synd)
Npoints=100
s=synd[1]
coefficients=c(coef.points[,s], coef.distances[,s], coef.areas[,s],coef.angles[,s])
graph=Graph(features=features[response==s,],indeces=indeces,dt=dt[non_sym_tr,])
colorCoefficients=ColorCoefficients(indeces=indeces2,coefficients=coefficients,graph=graph,Npoints=Npoints)
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces2.RData")
colorCoefficients=ColorCoefficients(indeces=indeces2,coefficients=coefficients,graph=graph,Npoints=Npoints)
coefficients=c(coef.points[,s], coef.distances[,s], coef.areas[,s],coef.angles[,s])
graph=Graph(features=features[response==s,],indeces=indeces,dt=dt[non_sym_tr,])
indeces2
graph[indeces$coordinates,]
graph['X',indeces2$coordinates,]
indeces=indeces2
x.coo=seq(min(graph['X',indeces$coordinates,]),max(graph[X,indeces$coordinates,]),length.out=Npoints)
x.coo=seq(min(graph['X',indeces$coordinates,]),max(graph["X",indeces$coordinates,]),length.out=Npoints)
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces2.RData")
coefficients=c(coef.points[,s], coef.distances[,s], coef.areas[,s],coef.angles[,s])
graph=Graph(features=features[response==s,],indeces=indeces,dt=dt[non_sym_tr,])
colorCoefficients=ColorCoefficients(indeces=indeces2,coefficients=coefficients,graph=graph,Npoints=Npoints)
dim(graph)
indeces=indeces2
x.coo=seq(min(graph['X',indeces$coordinates,]),max(graph["X",indeces$coordinates,]),length.out=Npoints)
y.coo=seq(min(graph['Y',indeces$coordinates,]),max(graph["Y",indeces$coordinates,]),length.out=Npoints)
grid=as.matrix(expand.grid(x.coo[Npoints:1],y.coo[1:Npoints])[(Npoints*Npoints):1,])
#### Compute color coefficients
ColorTotal=ColorDistances=ColorAreas=ColorAngles=ColorPoints=rep(NA,nrow(grid))
#Keep only non-zero coefficient
Coef.Points=coefficients[indeces$coordinates][coefficients[indeces$coordinates]!=0]
Coef.Distances=coefficients[indeces$distances][coefficients[indeces$distances]!=0]
Coef.Areas=coefficients[indeces$areas][coefficients[indeces$areas]!=0]
Coef.Angles=coefficients[indeces$angles][coefficients[indeces$angles]!=0]
#Keep only features with non-zero coefficients
Distances=t(graph[,names(Coef.Distances)])
names(Coef.Distances)
dim(graph)
graph[,names(Coef.Distances)]
colnames(graph)
mode(graph)
graph[,c("t38a3","t39a1","t39a2")]
names(Coef.Distances)
indeces
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces2.RData")
coefficients=c(coef.points[,s], coef.distances[,s], coef.areas[,s],coef.angles[,s])
graph=Graph(features=features[response==s,],indeces=indeces,dt=dt[non_sym_tr,])
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
x.coo=seq(min(graph['X',indeces2$coordinates,]),max(graph["X",indeces2$coordinates,]),length.out=Npoints)
y.coo=seq(min(graph['Y',indeces2$coordinates,]),max(graph["Y",indeces2$coordinates,]),length.out=Npoints)
grid=as.matrix(expand.grid(x.coo[Npoints:1],y.coo[1:Npoints])[(Npoints*Npoints):1,])
#### Compute color coefficients
ColorTotal=ColorDistances=ColorAreas=ColorAngles=ColorPoints=rep(NA,nrow(grid))
#Keep only non-zero coefficient
Coef.Points=coefficients[indeces$coordinates][coefficients[indeces$coordinates]!=0]
Coef.Distances=coefficients[indeces$distances][coefficients[indeces$distances]!=0]
Coef.Areas=coefficients[indeces$areas][coefficients[indeces$areas]!=0]
Coef.Angles=coefficients[indeces$angles][coefficients[indeces$angles]!=0]
#Keep only features with non-zero coefficients
Distances=t(graph[,names(Coef.Distances)])
Distances
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
Distances=t(graph[,names(Coef.Distances)])
Centroid=t(graph[,names(Coef.Areas)])
Vertex=t(graph[,names(Coef.Angles)])
Points=t(graph[,matrix(unlist(strsplit(names(Coef.Points),split="\\.")),ncol=2, byrow=T)[,1]])
colorCoefficients=ColorCoefficients(indeces=indeces,indeces2=indeces2,coefficients=coefficients,graph=graph,Npoints=Npoints)
ColorDist=colorCoefficients$ColorDistances
ColorPoints=colorCoefficients$ColorPoints
ColorAngles=colorCoefficients$ColorAngles
ColorAreas=colorCoefficients$ColorAreas
ColorTotal=colorCoefficients$ColorTotal
x.coo=colorCoefficients$x.coo
y.coo=colorCoefficients$y.coo
n.col=9
s=1
v=1
alpha=.5
SCALAR = 1
ColorFeature=ColorTotal
dt=dt
STAND=TRUE
NORM=TRUE
MIRRORED=TRUE
TRIANGULATION=T
color=hsv(h = seq(0.7,0,length.out=n.col), s = s, v = v, alpha=alpha)
Npoints=length(x.coo)
if(STAND) ColorFeature=scale(ColorFeature)
if(NORM) {ColorFeature=(exp(ColorFeature*SCALAR))/(1+exp(ColorFeature*SCALAR))}
ColorFeature=matrix(ColorFeature,ncol=Npoints,byrow=T)[Npoints:1,]
if(MIRRORED) {
ColorFeature=ColorFeature[,1:(Npoints/2)]+ColorFeature[,(Npoints):((Npoints/2)+1)]
ColorFeature=cbind(ColorFeature,ColorFeature[,(Npoints/2):1])
}
par(mar=rep(0, 4), xpd = NA)
image(x.coo,y.coo,t(ColorFeature),col=color,bty ="n",axes=F,frame.plot=F, xaxt='n', ann=FALSE, yaxt='n') #, asp=800/800
par(mar=rep(0, 4), xpd = NA)
image(x.coo,y.coo,t(ColorFeature),col=color,bty ="n",axes=F,frame.plot=F, xaxt='n', ann=FALSE, yaxt='n') #, asp=800/800
points(graph['X',indeces2$coordinates],graph['Y',indeces2$coordinates],col="red",xlab="",ylab="", main="")
textxy(graph['X',indeces2$coordinates],graph['Y',indeces2$coordinates],labs=1:48, cex = 1, col = "red")
lines(graph['X',indeces2$coordinates][ena],graph['Y',indeces2$coordinates][ena],lwd=2)
for(i in 1:dim(dt)[1]) {
ena=dt[i,]
ena[4]=dt[i,1]
lines(graph['X',indeces2$coordinates][ena],graph['Y',indeces2$coordinates][ena],lwd=2)
}
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
ColorDist=colorCoefficients$ColorDistances
ColorPoints=colorCoefficients$ColorPoints
ColorAngles=colorCoefficients$ColorAngles
ColorAreas=colorCoefficients$ColorAreas
ColorTotal=colorCoefficients$ColorTotal
x.coo=colorCoefficients$x.coo
y.coo=colorCoefficients$y.coo
x=ColoredPlots(indeces=indeces,indeces2=indeces2,n.col=9, s=1,v=1, alpha=.5, SCALAR = 1, ColorFeature=ColorTotal, dt=dt, non_sym_tr=non_sym_tr,x.coo=x.coo, y.coo=y.coo, graph=graph, STAND=TRUE,NORM=TRUE,  MIRRORED=TRUE,TRIANGULATION=T)
ColorDist=colorCoefficients$ColorDistances
ColorPoints=colorCoefficients$ColorPoints
ColorAngles=colorCoefficients$ColorAngles
ColorAreas=colorCoefficients$ColorAreas
ColorTotal=colorCoefficients$ColorTotal
x.coo=colorCoefficients$x.coo
y.coo=colorCoefficients$y.coo
x=ColoredPlots(indeces=indeces,indeces2=indeces2,n.col=9, s=1,v=1, alpha=.5, SCALAR = 1, ColorFeature=ColorTotal, dt=dt, non_sym_tr=non_sym_tr,x.coo=x.coo, y.coo=y.coo, graph=graph, STAND=TRUE,NORM=TRUE,  MIRRORED=TRUE,TRIANGULATION=T)
pathColImg='Documents/Projects/02_SyndromeClassification/NewProject/'
feature
pathColImg='Documents/Projects/02_SyndromeClassification/NewProject/'
png(filename = paste(pathColImg,s,feature,'.png',sep=""))
x=ColoredPlots(indeces=indeces,indeces2=indeces2,n.col=9, s=1,v=1, alpha=.5, SCALAR = 1, ColorFeature=ColorTotal, dt=dt, non_sym_tr=non_sym_tr,x.coo=x.coo, y.coo=y.coo, graph=graph, STAND=TRUE,NORM=TRUE,  MIRRORED=TRUE,TRIANGULATION=T)
dev.off()
colorCoefficients[[ColorDistances]]
colorCoefficients
colorCoefficients[[ColorDistances]]
colorCoefficients[ColorDistances]
colorCoefficients[ColorDistances]
colorCoefficients[[ColorDistances]]
names(colorCoefficients)
colorCoefficients[["ColorDistances"]]
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
coefficients=c(coef.points[,s], coef.distances[,s], coef.areas[,s],coef.angles[,s])
graph=Graph(features=features[response==s,],indeces=indeces,dt=dt[non_sym_tr,])
colorCoefficients=ColorCoefficients(indeces=indeces,indeces2=indeces2,coefficients=coefficients,graph=graph,Npoints=Npoints)
rm(list=ls())
library(geometry); library(grDevices) ; library(calibrate)
set.seed(30091987)
source(file="Documents/Projects/02_SyndromeClassification/NewProject/Functions.R")
#This will be replaced
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces2.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/features.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/response.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/dt.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/non_sym_tr.RData")
#This will be replaced
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_dist.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_angles.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_areas.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_point.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
colnames(coef.distances)=colnames(coef.areas)=colnames(coef.angles)=colnames(coef.points)=levels(response)
# Compute and save color coefficients
synd=levels(response)
N_synd=length(synd)
Npoints=100
s=synd[1]
coefficients=c(coef.points[,s], coef.distances[,s], coef.areas[,s],coef.angles[,s])
graph=Graph(features=features[response==s,],indeces=indeces,dt=dt[non_sym_tr,])
colorCoefficients=ColorCoefficients(indeces=indeces,indeces2=indeces2,coefficients=coefficients,graph=graph,Npoints=Npoints)
colorCoefficients
colorCoefficients[['points']]
names(colorCoefficients)
features=c("coordinate", "distance","area","angle")
features=c("coordinate", "distance","area","angle")
synd=levels(response)
N_synd=length(synd)
Npoints=100
features=c("coordinate", "distance","area","angle")
coefficients=c(coef.points[,s], coef.distances[,s], coef.areas[,s],coef.angles[,s])
graph=Graph(features=features[response==s,],indeces=indeces,dt=dt[non_sym_tr,])
colorCoefficients=ColorCoefficients(indeces=indeces,indeces2=indeces2,coefficients=coefficients,graph=graph,Npoints=Npoints)
s
library(geometry); library(grDevices) ; library(calibrate)
set.seed(30091987)
source(file="Documents/Projects/02_SyndromeClassification/NewProject/Functions.R")
#This will be replaced
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces2.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/features.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/response.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/dt.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/non_sym_tr.RData")
#This will be replaced
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_dist.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_angles.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_areas.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_point.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
colnames(coef.distances)=colnames(coef.areas)=colnames(coef.angles)=colnames(coef.points)=levels(response)
rm(list=ls())
library(geometry); library(grDevices) ; library(calibrate)
set.seed(30091987)
source(file="Documents/Projects/02_SyndromeClassification/NewProject/Functions.R")
#This will be replaced
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces2.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/features.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/response.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/dt.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/non_sym_tr.RData")
#This will be replaced
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_dist.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_angles.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_areas.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_point.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
colnames(coef.distances)=colnames(coef.areas)=colnames(coef.angles)=colnames(coef.points)=levels(response)
# Compute and save color coefficients
synd=levels(response)
N_synd=length(synd)
Npoints=100
features=c("coordinate", "distance","area","angle")
s=synd[1]
coefficients=c(coef.points[,s], coef.distances[,s], coef.areas[,s],coef.angles[,s])
graph=Graph(features=features[response==s,],indeces=indeces,dt=dt[non_sym_tr,])
colorCoefficients=ColorCoefficients(indeces=indeces,indeces2=indeces2,coefficients=coefficients,graph=graph,Npoints=Npoints)
source(file="Documents/Projects/02_SyndromeClassification/NewProject/Functions.R")
#This will be replaced
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces2.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/features.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/response.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/dt.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/non_sym_tr.RData")
#This will be replaced
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_dist.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_angles.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_areas.RData")
load("Documents/Projects/02_SyndromeClassification/0302_Glmnet_Coef_point.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
colnames(coef.distances)=colnames(coef.areas)=colnames(coef.angles)=colnames(coef.points)=levels(response)
# Compute and save color coefficients
synd=levels(response)
N_synd=length(synd)
Npoints=100
feature=c("coordinate", "distance","area","angle")
coefficients=c(coef.points[,s], coef.distances[,s], coef.areas[,s],coef.angles[,s])
graph=Graph(features=features[response==s,],indeces=indeces,dt=dt[non_sym_tr,])
colorCoefficients=ColorCoefficients(indeces=indeces,indeces2=indeces2,coefficients=coefficients,graph=graph,Npoints=Npoints)
save(x = colorCoefficients,file = paste("Documents/Projects/02_SyndromeClassification/NewProject/", s,".ColCoef.RData", sep=""))
x.coo=colorCoefficients$x.coo
y.coo=colorCoefficients$y.coo
png(filename = paste(pathColImg,s,feature,'.png',sep=""))
pathColImg='Documents/Projects/02_SyndromeClassification/NewProject/'
x=ColoredPlots(indeces=indeces,indeces2=indeces2,n.col=9, s=1,v=1, alpha=.5, SCALAR = 1, ColorFeature=colorCoefficients[[feature[1]]], dt=dt, non_sym_tr=non_sym_tr,x.coo=x.coo, y.coo=y.coo, graph=graph, STAND=TRUE,NORM=TRUE,  MIRRORED=TRUE,TRIANGULATION=T)
pathAverImg='Documents/Projects/02_SyndromeClassification/0502_Averages/s1b.jpg'
pathNewImage='Documents/Projects/02_SyndromeClassification/NewProject/'
png(filename = paste(pathColImg,s,feature,'.png',sep=""))
x=ColoredPlots(indeces=indeces,indeces2=indeces2,n.col=9, s=1,v=1, alpha=.5, SCALAR = 1, ColorFeature=colorCoefficients[[feature[1]]], dt=dt, non_sym_tr=non_sym_tr,x.coo=x.coo, y.coo=y.coo, graph=graph, STAND=TRUE,NORM=TRUE,  MIRRORED=TRUE,TRIANGULATION=T)
dev.off()
pathColImg='Documents/Projects/02_SyndromeClassification/NewProject/'
png(filename = paste(pathColImg,s,feature,'.png',sep=""))
x=ColoredPlots(indeces=indeces,indeces2=indeces2,n.col=9, s=1,v=1, alpha=.5, SCALAR = 1, ColorFeature=colorCoefficients[[feature[1]]], dt=dt, non_sym_tr=non_sym_tr,x.coo=x.coo, y.coo=y.coo, graph=graph, STAND=TRUE,NORM=TRUE,  MIRRORED=TRUE,TRIANGULATION=T)
dev.off()
x=ColoredPlots(indeces=indeces,indeces2=indeces2,n.col=9, s=1,v=1, alpha=.5, SCALAR = 1, ColorFeature=colorCoefficients[[feature[1]]], dt=dt, non_sym_tr=non_sym_tr,x.coo=x.coo, y.coo=y.coo, graph=graph, STAND=TRUE,NORM=TRUE,  MIRRORED=TRUE,TRIANGULATION=T)
pathAverImg='Documents/Projects/02_SyndromeClassification/0502_Averages/s1b.jpg'
pathNewImage='Documents/Projects/02_SyndromeClassification/NewProject/'
paste(pathColImg,s,feature,'.png',sep="")
pathAverImg
pathColImg
pathColImg=paste('Documents/Projects/02_SyndromeClassification/NewProject/',s,feature[1],'.png',sep="")
pathColImg
pathAverImg
pathColImg
MIXave=.7
POWERave=2
POWERcol=2
MIXcol=1-MIXave
Average=channel(readImage(pathAverImg), 'rgb');
library(geometry); library(grDevices) ; library(calibrate)
library(geometry); library(grDevices) ; library(calibrate);library(EBImage)
Average=channel(readImage(pathAverImg), 'rgb');
Color=resize(readImage(pathColImg), dim(Average)[1], dim(Average)[2])
Color2=resize(MIXave*(Average)^POWERave+MIXcol*(Color[,,1:3])^POWERcol,dim(Average)[1], dim(Average)[2])
Color2
image(Color2)
pathNewImage
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
pathNewImage=paste('Documents/Projects/02_SyndromeClassification/NewProject/',s,feature[1], 'comb','.png',sep=""
pathNewImage=paste('Documents/Projects/02_SyndromeClassification/NewProject/',s,feature[1], 'comb','.png',sep="")
pathNewImage
source('~/Documents/Projects/02_SyndromeClassification/NewProject/Functions.R')
CollapseColorAndAverg(pathAverImg,pathColImg,pathNewImage,MIXave=.7,POWERave=2, POWERcol=2)
indeces
indeces=list(indeces_ft=indeces, indeces_gr=indeces2)
indeces
save(indeces,file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
rm(list=ls())
source(file="Documents/Projects/02_SyndromeClassification/NewProject/Functions.R")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
indeces
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/features.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/response.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/dt.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/non_sym_tr.RData")
data=list(features=features,response=response)
data=list(features=features,response=response)
save(data, "Documents/Projects/02_SyndromeClassification/NewProject/Data.RData")
data=list(features=features,response=response)
save(data, "Documents/Projects/02_SyndromeClassification/NewProject/Data.RData")
save(data, file = "Documents/Projects/02_SyndromeClassification/NewProject/data.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/data.RData")
rm(list=ls())
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/data.RData")
data
data$features
names(data$features)
rownames(data$features)
data$features
data$response
rownames(data$features)=data$features
rownames(data$features)=data$response
data
response=data$response
features=data$features
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/indeces.RData")
indeces
c("coordinate", "distance","area","angle")
matrix(1:48,nrow=1)
dim(matrix(1:48,nrow=1))
matrix(1:48,ncol=1)
dim(matrix(1:48,ncol=1))
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/non_sym_tr.RData")
load(file = "Documents/Projects/02_SyndromeClassification/NewProject/dt.RData")
dt
structure=list(coordinate=matrix(1:48,ncol=1), area=dt, angle=dt)
rotation.norm.pairs = list(front = list(c(0,1), c(2,5), c(3,4), c(7,8), c(12,13), c(14,20), c(15,19), c(30,21), c(24,22), c(26,27), c(28,29), c(31,32), c(33,34), c(36,35), c(37,38), c(40,39), c(41,42), c(44,43), c(47,46)), "sideview-l" = list(c(3, 40), c(7,38), c(19, 32)));
rotation.norm.pairs
c(0,1), c(2,5), c(3,4), c(7,8), c(12,13), c(14,20), c(15,19), c(30,21), c(24,22), c(26,27), c(28,29), c(31,32), c(33,34), c(36,35), c(37,38), c(40,39), c(41,42), c(44,43), c(47,46))
c(c(0,1), c(2,5), c(3,4), c(7,8), c(12,13), c(14,20), c(15,19), c(30,21), c(24,22), c(26,27), c(28,29), c(31,32), c(33,34), c(36,35), c(37,38), c(40,39), c(41,42), c(44,43), c(47,46)))
c(c(0,1), c(2,5), c(3,4), c(7,8), c(12,13), c(14,20), c(15,19), c(30,21), c(24,22), c(26,27), c(28,29), c(31,32), c(33,34), c(36,35), c(37,38), c(40,39), c(41,42), c(44,43), c(47,46))
matrix(c(c(0,1), c(2,5), c(3,4), c(7,8), c(12,13), c(14,20), c(15,19), c(30,21), c(24,22), c(26,27), c(28,29), c(31,32), c(33,34), c(36,35), c(37,38), c(40,39), c(41,42), c(44,43), c(47,46)))
matrix(c(c(0,1), c(2,5), c(3,4), c(7,8), c(12,13), c(14,20), c(15,19), c(30,21), c(24,22), c(26,27), c(28,29), c(31,32), c(33,34), c(36,35), c(37,38), c(40,39), c(41,42), c(44,43), c(47,46)),ncol=2,byrow=2)
matrix(c(c(0,1), c(2,5), c(3,4), c(7,8), c(12,13), c(14,20), c(15,19), c(30,21), c(24,22), c(26,27), c(28,29), c(31,32), c(33,34), c(36,35), c(37,38), c(40,39), c(41,42), c(44,43), c(47,46)),ncol=2,byrow=2)+1
matrix(c(c(0,1), c(2,5), c(3,4), c(7,8), c(12,13), c(14,20), c(15,19), c(30,21), c(24,22), c(26,27), c(28,29), c(31,32), c(33,34), c(36,35), c(37,38), c(40,39), c(41,42), c(44,43), c(47,46)),ncol=2,byrow=2)+1
x=matrix(c(c(0,1), c(2,5), c(3,4), c(7,8), c(12,13), c(14,20), c(15,19), c(30,21), c(24,22), c(26,27), c(28,29), c(31,32), c(33,34), c(36,35), c(37,38), c(40,39), c(41,42), c(44,43), c(47,46)),ncol=2,byrow=2)+1
x
cat.de
source("https://bioconductor.org/biocLite.R")
biocLite("CGEN")
source("https://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("CGEN")
setwd('~/Documents/GitHub/GeneticsFace//dev')
library('tools');
library('shapes');
library('EBImage');
library('geometry');
library('sets');
source('../GeneticsFace/R/Rdata.R');
source('../GeneticsFace/R/Rgraphics.R');
source('../GeneticsFace/R/facePreprocess.R');
source('../GeneticsFace/R/faceData.R');
source('../GeneticsFace/R/facePlotting.R');
source('../GeneticsFace/R/faceSymmetry.R');
source('../GeneticsFace/R/faceFeatures.R');
source('../GeneticsFace/R/faceClassification.R');
library('calibrate')
library('tools');
library('shapes');
library('EBImage');
library('geometry');
library('sets');
library('calibrate')
source('../GeneticsFace/R/Rdata.R');
source('../GeneticsFace/R/Rgraphics.R');
source('../GeneticsFace/R/facePreprocess.R');
source('../GeneticsFace/R/faceData.R');
source('../GeneticsFace/R/facePlotting.R');
source('../GeneticsFace/R/faceSymmetry.R');
source('../GeneticsFace/R/faceFeatures.R');
source('../GeneticsFace/R/faceClassification.R');
load('~/Downloads/classifier.RData')
meanGraph=gr$graphs
model=rClass$model
modelDesc=dataFeature$desc
output="~/Downloads/"
average = readImage("~/Downloads/s.tif")
source('~/Documents/GitHub/GeneticsFace/dev/featureExtraction.R')
source('~/Documents/GitHub/GeneticsFace/GeneticsFace/R/faceVisualization.R')
visualizeClassfifier(gr$graphs, rClass$model, dataFeature$desc);
source('~/Documents/GitHub/GeneticsFace/dev/featureExtraction.R')
importancePlot(meanGraph, model, modelDesc, pars = list(), output, average);
pars = merge.lists(parsDefault, pars);
pars = list()
pars = merge.lists(parsDefault, pars);
colorCoefficients=gridColor(meanGraph, model, modelDesc, pars)
feature
feature="coordinate"
dev.off()
dev.off()
coloredPlots(feature, meanGraph, modelDesc, colorCoefficients, pars)
source('~/Documents/GitHub/GeneticsFace/GeneticsFace/R/faceVisualization.R')
source('~/Documents/GitHub/GeneticsFace/GeneticsFace/R/faceVisualization.R')
coloredPlots(feature, meanGraph, modelDesc, colorCoefficients, pars)
pars = merge.lists(parsDefault, pars);
pars=list()
pars = merge.lists(parsDefault, pars);
colorCoefficients=gridColor(meanGraph, model, modelDesc, pars)
coloredPlots(feature, meanGraph, modelDesc, colorCoefficients, pars)
pars$TRIANGULATION=T
coloredPlots(feature, meanGraph, modelDesc, colorCoefficients, pars)
feature='all'
coloredPlots(feature, meanGraph, modelDesc, colorCoefficients, pars)
source('~/Documents/GitHub/GeneticsFace/GeneticsFace/R/faceVisualization.R')
source('~/Documents/GitHub/GeneticsFace/GeneticsFace/R/faceVisualization.R')
source('~/Documents/GitHub/GeneticsFace/GeneticsFace/R/faceVisualization.R')
source('~/Documents/GitHub/GeneticsFace/GeneticsFace/R/faceVisualization.R')
source('~/Documents/GitHub/GeneticsFace/GeneticsFace/R/faceVisualization.R')
source('~/Documents/GitHub/GeneticsFace/GeneticsFace/R/faceVisualization.R')
source('~/Documents/GitHub/GeneticsFace/GeneticsFace/R/faceVisualization.R')
rm(list=ls())
